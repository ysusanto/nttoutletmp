<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.1   |
    |              on 2021-07-31 14:00:24              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Services; use DB; use App\Package; use Illuminate\Http\Request; use Illuminate\Support\Str; use Illuminate\Support\Facades\Artisan; class PackageInstaller { public $package; public $slug; public $namespace; public $path; public $migrations; public function __construct(Request $request, array $installable) { $this->package = array_merge($installable, $request->all()); $this->slug = $installable["\163\154\x75\147"]; $this->namespace = "\134\x49\156\143\x65\166\151\157\x5c\x50\141\143\x6b\x61\147\145\x5c" . Str::studly($this->slug); $this->path = base_path("\x70\141\143\153\x61\x67\x65\x73") . DIRECTORY_SEPARATOR . $this->slug; $this->migrations = str_replace(base_path(), '', $this->path . "\57\144\141\x74\x61\142\141\163\x65\57\x6d\x69\147\x72\x61\164\x69\157\156\163"); } public function install() { \Log::info("\111\156\163\164\x61\x6c\154\151\156\147\x20\120\141\x63\153\x61\x67\145\x20" . $this->slug); Package::create(array_merge($this->package, preparePackageInstallation($this->package))); $this->migrate()->seed(); return True; } private function migrate() { \Log::info("\115\151\147\162\x61\x74\151\156\147\40\163\x74\141\x72\x74\145\x64\x3a\40" . $this->slug); Artisan::call("\x6d\151\147\x72\x61\164\x65", ["\55\55\x70\141\164\x68" => $this->migrations, "\55\x2d\x66\x6f\162\x63\145" => true]); \Log::info(Artisan::output()); return $this; } private function seed() { \Log::info("\123\145\x65\x64\151\x6e\147\x20\163\x74\x61\x72\x74\145\144\72\40" . $this->slug); foreach (glob($this->path . "\x2f\144\141\x74\x61\142\x61\x73\x65\57\x73\x65\x65\144\x73\x2f\52\56\160\x68\160") as $filename) { include $filename; $classes = get_declared_classes(); $migration = end($classes); Artisan::call("\x64\x62\x3a\x73\x65\145\144", ["\55\x2d\x63\x6c\x61\x73\x73" => $migration, "\55\55\146\x6f\162\143\145" => true]); \Log::info(Artisan::output()); mlepV: } uf3il: return $this; } public function uninstall() { \Log::info("\125\156\x69\156\163\164\x61\x6c\x6c\151\x6e\147\40\x50\x61\143\153\141\x67\145\x3a\x20" . $this->slug); $class = $this->namespace . "\134\x55\x6e\151\156\163\164\141\x6c\154\145\162"; if (class_exists($class)) { goto dvQUs; } return true; dvQUs: (new $class())->cleanDatabase(); return $this->rollback(); } private function rollback() { \Log::info("\122\x6f\x6c\x6c\151\x6e\x67\40\x62\141\143\x6b\40\56\56\56\40" . $this->slug); foreach (array_reverse(glob($this->path . "\57\144\x61\x74\141\x62\141\x73\x65\57\x6d\x69\147\x72\141\x74\x69\x6f\x6e\x73\57\52\137\x2a\56\160\x68\x70")) as $filename) { include $filename; $migration = str_replace("\56\160\150\x70", '', basename($filename)); \Log::info("\x52\x6f\154\x6c\151\x6e\x67\x20\x62\x61\143\x6b\72\40" . $migration); $class = Str::studly(implode("\137", array_slice(explode("\x5f", $migration), 4))); (new $class())->down(); if (DB::table("\155\x69\x67\162\x61\x74\151\157\x6e\163")->where("\155\x69\147\162\x61\164\x69\157\156", $migration)->delete()) { goto Fc87e; } \Log::info("\x52\157\x6c\154\142\x61\143\153\x20\x46\x41\111\x4c\x45\x44\x3a\x20" . $migration); goto vtxRT; Fc87e: \Log::info("\x52\x6f\154\154\145\x64\x20\x62\141\143\x6b\72\40" . $migration); vtxRT: U2soH: } WPpp3: return $this; } }